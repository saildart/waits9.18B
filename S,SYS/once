COMMENT ⊗   VALID 00008 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00002 00002	UUOFLK LINKSR BLTBEG
C00004 00003	LOC20 LOC40 DDXLOC
C00006 00004	 ONCE MPXMIC LMPXMC MPXLOD PTREV0 PTREV1
C00014 00005	ONCE9
C00015 00006	ONCEPN ONCEPD NDDTM
C00016 00007	SETCRA CRA.1 CPTAB CPT.17 CPT.16 CPT.15 CPT.13 CPT.07 CPT.14 CPT.12 CPT.11 CPT.06 CPT.05 CPT.03
C00022 00008	DECOUT START SPDL THEEND
C00025 ENDMK
C⊗;
;UUOFLK LINKSR BLTBEG

BEGIN ONCE ONLY CODE ↔ SUBTTL ONCE

IFE FTSEPONCE,<
↑UUOFLK←←UUOLNK			;FIX THIS UP NOW (AT END OF SYSTEM)
>;IFE FTSEPONCE

;THIS PAGE IS THE EXIT FROM ONCE!

LINKSR:
;	MOVE TAC,[PUSHJ P,OUTCHS]	;DWP FOR TTYSER
;	MOVEM TAC,CONTYO		;DWP
;	MOVE TAC,[PUSHJ P,GETCHR]
;	MOVEM TAC,CONTYI		;DWP
NOKL10,<
LINKS1:	CONSZ CTY,20			;WAIT FOR CTY TO FINISH TYPEOUT
	JRST LINKS1
>;NOKL10
	MOVE AC1,ONCE			;SAVE RETURN ADDR

IFN FTSEPONCE,<	;used to be IFE FTIP
IFN FTDDT,<
;SAVE SYMBOLS FOR DDT. DDTSYM IS SET UP AT LOAD TIME.

	HLRO TAC1,DDTSYM		;-LENGTH OF SYMBOL TABLE
	MOVNS TAC1			;MAKE IT +
	HRLZ TAC,DDTSYM			;SYMTAB BEGINS HERE
	HRRI TAC,BLTBEG			;MOVE IT TO HERE
	BLT TAC,BLTBEG-1(TAC1)		;THERE IT WENT
	MOVEI TAC,BLTBEG		;TELL EXEC DDT WHERE
	HRRM TAC,DDTSYM			;IT LOOKS AT 36
	MOVEI TAC,BLTBEG(TAC1)		;END OF SYMBOL TABLE.
>;IFN FTDDT
IFE FTDDT,<
	MOVEI TAC,BLTBEG
>;IFE FTDDT
>;IFN FTSEPONCE
IFE FTSEPONCE,<	;used to be IFN FTIP
	HLRO TAC,DDTSYM			;-LENGTH OF SYMBOL TABLE
	MOVNS TAC			;MAKE IT +
	ADD TAC,DDTSYM			;find end of symbol table as end of system
>;IFE FTSEPONCE
	MOVEM TAC,SYSSIZ		;IS TOP OF SYSTEM.
	JRST @AC1			;RETURN TO SYSINI

LIT
↑↑BLTBEG←←.				;FIRST LOCATION OF ONCE THAT'S CLOBBERED
;LOC20 LOC40 DDXLOC

IFE FTF2,<
;LEAVE A 20 LOADER IN CORE

LOC20:	CONO PTR,60	
	CONSO PTR,10	
	JRST 21	
	DATAI PTR,26	
	CONSO PTR,10	
	JRST 24	
	0	
	JRST 21
>;IFE FTF2

;SETUP LOCATIONS 40 THRU 61

IFE FTXADR,<
;P1 TRAP LOCATIONS
LOC40:	0			;UUO STORED HERE
	JSR UUO0		;UUO TRAPS HERE
	JSR CH1
	JSR PIERR
	JSR CH2
	JSR PIERR
	JSR CH3
	JSR PIERR
	JSR CH4
	JSR PIERR
	JSR CH5
	JSR PIERR
	JSR CH6
	JSR PIERR
	JSR CH7
	JSR PIERR
NOKL10,<
	0			;ILLEGAL INSTRUCTION STORED HERE
	JSR UUO2		;ILLEGAL INSTRUCTION TRAPS HERE 
>;NOKL10
>;IFE FTXADR

IFN FTXADR,<
;P1 TRAP LOCATIONS
LOC40:	0			;unused
	0			;unused
	XPCW CH1
	XPCW PIERR
	XPCW CH2
	XPCW PIERR
	XPCW CH3
	XPCW PIERR
	XPCW CH4
	XPCW PIERR
	XPCW CH5
	XPCW PIERR
	XPCW CH6
	XPCW PIERR
	XPCW CH7
	XPCW PIERR
NOKL10,<
	0			;ILLEGAL INSTRUCTION STORED HERE
	JSR UUO2		;ILLEGAL INSTRUCTION TRAPS HERE 
>;NOKL10
>;IFN FTXADR

IFN FTDDT,<
DDXLOC:	SYMLOC			;AT LOC 162 - POINTERS INTO DDT FOR UEDDT
	DDTXCOR
	DDTMAP
	(RDDTA+777)&777000	;DDTA -- first word mapped out
>;IFN FTDDT
;⊗ ONCE MPXMIC LMPXMC MPXLOD PTREV0 PTREV1

;ONCE ONLY CODE - OPERATOR SETUP DIALOGUE

↑ONCE:	0				;JSR HERE FROM SYSINI
IFKL10,<
	DATAO KLPAG,[406000,,0]		;SET CURRENT CONTEXT TO AC BLOCK 6
	MOVE 0,[000777,,-1]		;MASK TO CLEAR AGE FIELD IN CST (CSMSK)
	MOVSI 1,100000			;PROCESS USE REGISTER, GETS ORED WITH CST
	MOVEI 2,CST			;CST BASE ADDRESS (CBR)
IFN FTKLB,<
;maybe this AC isn't really used by the KL-10B?
	MOVEI 4,000001			;MODIFICATION BIT IN CST ENTRY
>;IFN FTKLB
IFE FTKLB,<
	MOVSI 4,000400			;MODIFICATION BIT IN CST ENTRY
>;IFE FTKLB
	DATAO KLPAG,[400100,,0]		;PUT AC CONTEXT BACK
>;IFKL10
	MOVE P,[-ONCEPN,,ONCEPD-1]
	MOVEI IOS,0			;MAKE SURE SCNSER WILL TYPE ;JS
;	MOVE TAC,[IDPB TEM,DAT]		;DWP FOR TTYSER
;	MOVEM TAC,CONTYO		;DWP
;	MOVE TAC,[ILDB TEM,DAT]
;	MOVEM TAC,CONTYI		;DWP
	MOVE DAT,LINEP			;SETUP LINE BYTE POINTER
	PUSHJ P,CRLF
	MOVEI TAC,CONFIG
	PUSHJ P,CONMES
	PUSHJ P,CRLF

IFE FTDDT,<
	MOVEI TAC,NDDTM
	PUSHJ P,CONMES
>;FTDDT

	PUSHJ P,OPOUT			;TYPE IT OUT NOW


NOKL10,<
	MOVEI TAC,652237		;PI CONO
	HRRM TAC,PICON
	MOVEI TAC,40+MATOFF
	MOVEM TAC,UUOLOC
	MOVE TAC,[LOC40,,40+MATOFF]
	BLT TAC,61+MATOFF		;PUT INTERRUPT LOCATIONS IN RIGHT PLACE
>;NOKL10

IFE FTF2,<
	MOVE TAC,[LOC20,,20]
	BLT TAC,27			;LEAVE 20 LOADER AROUND
>;IFE FTF2
IFKL10,<
	MOVEI TAC,032237		;KL10 PI CONO
	HRRM TAC,PICON
IFN FTKLB,<
	MOVEI TAC,KLLUUB		;set up ptr to block for user LUUOs from
	MOVEM TAC,KLUPT+KLLUUP		; nonzero sections to save info in
	MOVEI TAC,UUOWRD		;for extended KL, UUO reconstructed here
	MOVEM TAC,UUOLOC		;set up pointer to saved UUO
>;IFN FTKLB
IFE FTKLB,<
	MOVEI TAC,KLUPT+KLUUOW		;IMAGE OF MUUO STORED HERE
	MOVEM TAC,UUOLOC		;pointer to saved UUO
>;IFE FTKLB
	MOVE TAC,[JSR KLLUUT]		;LUUO TRAP FOR P1,
	MOVEM TAC,41			;ONLY IF P2 IS A KA10 (THAT'S ABS 40/41!!)
	MOVE TAC,[LOC40+2,,KLEPT+42]	;(EPT LOC 40/41 AREN'T USED)
	BLT TAC,KLEPT+57		;PUT INTERRUPT LOCATIONS IN RIGHT PLACE
	MOVSI TAC,(<CAI>)
	MOVEM TAC,KLEPT+KLEOVT		;EXEC ARITHMETIC OVERFLOW TRAP INSTR.
	MOVEM TAC,KLEPT+KLET3T		;EXEC TRAP-3 TRAP INSTR.
	MOVEM TAC,KLUPT+KLUOVT		;USER AROV TRAP INSTR.
	MOVEM TAC,KLUPT+KLUT3T		;USER TRAP-3 INSTR.
	MOVE TAC,[JSR EPDLOV]
	MOVEM TAC,KLEPT+KLEPDT		;EXEC PDLOV TRAP INSTR.
	MOVE TAC,[.TRAP 2,]
	MOVEM TAC,KLUPT+KLUPDT		;USER PDLOV TRAP INSTR.
IFN FTKLB,<
	MOVEI TAC,KLUUOH		;THE UUO TRAP HANDLER.
>;IFN FTKLB
IFE FTKLB,<
	MOVE TAC,[PCU,,KLUUOH]		;THE UUO TRAP HANDLER. PREV CONTEXT USER
>;IFE FTKLB
	MOVEM TAC,KLUPT+KLKNTW
	MOVE TAC,[KLUPT+KLKNTW,,KLUPT+KLKNTW+1]
	BLT TAC,KLUPT+KLPTW
IFN FTKLB,<
	MOVEI TAC,TRPUUO
>;IFN FTKLB
IFE FTKLB,<
	MOVE TAC,[PCU,,TRPUUO]
>;IFE FTKLB
	MOVEM TAC,KLUPT+KLCTW		;.TRAP WILL TRAP TO TRPUUO
	MOVEM TAC,KLUPT+KLPTW
IFN FTKLB,<
	MOVEI TAC,KLPFTR		;PAGE FAIL TRAP HANDLER
>;IFN FTKLB
IFE FTKLB,<
	MOVE TAC,[PCU,,KLPFTR]		;PAGE FAIL TRAP HANDLER
>;IFE FTKLB
	MOVEM TAC,KLUPT+KLPFNP
	PUSHJ P,SETCRA			;SETUP CACHE REFILL ALGORITHM
>;IFKL10
IFN FTMPX,<
	JRST MPXLOD			;LOAD MAPPIPLEXOR MICROCODE

IFE FTSEPONCE,<
LOC <.+777>∧777000			;NEXT PAGE BOUNDARY
>;IFE FTSEPONCE
IFN FTSEPONCE,<
;Since ONCE is no longer an absolute assembly, we can't do a LOC to the
;next page boundary, but instead we leave enough space so that a page
;boundary definitely occurs here, and then we BLT the MPX microcode
;down to the page boundary before making the MPX load the microcode.
;It doesn't matter if we waste a piece of a page here, as this part of
;ONCE is reclaimed for use by DDT symbols or free storage anyway.
	BLOCK 1000-1	;must be a page boundary in here or at MPXMIC
>;IFN FTSEPONCE
MPXMIC:
.INSERT MPX.INS[S,SYS]		;GET MICROCODE
LMPXMC←←.-MPXMIC		;size of MPX microcode in PDP10 words

MPXLOD:
IFN FTSEPONCE,<
;BLT the MPX microcode down to a page boundary, since MPX requires that
	MOVE TAC,[MPXMIC,,MPXMIC&777000] ;source,,dest -- for BLT
	BLT TAC,MPXMIC&777000+LMPXMC-1	;BLT microcode down to page boundary
>;IFN FTSEPONCE
	MOVEI TAC,MPXMIC
	LSH TAC,-9		;PHYSICAL PAGE NUMBER OF MICROCODE
	HRLI TAC,400000
	CONSZ MPX,MBUSY			;MAKE SURE MPX IS NOT BUSY
	JRST .-1
	CONO MPX,MRESET!MENBPI		;ZAP HIM GOOD
	CONSZ MPX,MBUSY
	JRST .-1			;WAIT TILL DONE CLEARING RAMS
	DATAO MPX,TAC			;START MICROCODE LOAD
	CONSZ MPX,MBUSY			;WAIT FOR MICROCODE LOAD TO FINISH
	JRST .-1
>;IFN FTMPX

IFN FTDDT,<
	MOVE TAC,[DDXLOC,,162]
	BLT TAC,165			;SETUP FOR UEDDT
>;FTDDT

	SETZM TIME
	SETZM THSDAT
	SETZM PSTIME
	SETZM PSDATE
	SETZM DAYLIT			;ASSUME PST

REPEAT 0,<
	CONO PTR,120			;THIS IS THE PTR REVERSE HACK
PTREV0:	MOVEI TAC1,=40			;TWO EXTRA INCHES AFTER WE STOP SEEING BITS
PTREV1:	CONSZ PTR,20			;WAIT FOR ¬BUSY
	JRST .-1
	DATAI PTR,TAC
	ANDI TAC,300
	CAIN TAC,200			;SKIP IF ¬ A BINARY TAPE
	JRST PTREV0			;WE SAW A BIT.  SET COUNT TO MAX
	SOJG TAC1,PTREV1		;LOOP FOR A WHILE AFTER WE SEE THE LAST BIT
>;END REPEAT 0

;FALL THROUGH
;ONCE9

;FALL THROUGH

ONCE9:	MOVSI TAC,(<JFCL>)
	MOVEM TAC,ONCEI
	JRST LINKSR
;ONCEPN ONCEPD NDDTM

;CONSTANTS AND PUSH DOWN LIST

ONCEPN←←100
ONCEPD:	BLOCK	ONCEPN		;PUSH DOWN LIST

;MESSAGES

IFE FTDDT,<
NDDTM:	ASCIZ/NON-DDT SYSTEM!
/
>
;SETCRA CRA.1 CPTAB CPT.17 CPT.16 CPT.15 CPT.13 CPT.07 CPT.14 CPT.12 CPT.11 CPT.06 CPT.05 CPT.03

;SETCRA - LOAD CACHE REFILL ALGORITHM

IFKL10,<
SETCRA:	CONSZ KLPAG,600000		;SKIP IF CACHE IS OFF
	POPJ P,
	MOVEI TAC,DTRCDW		;READ KL10 CLOCK DEFAULT WORD
	PUSHJ P,DTEXXW			;WAIT FOR RESPONSE
	LDB TAC,[POINT 4,TAC,3]		;GET THE CACHE ENABLE CODE FROM THE 11
	PUSH P,TAC
	MOVE DAT,LINEP
	MOVEI TAC,[ASCIZ /Cache enables = /]
	PUSHJ P,CONMES
	MOVE TAC,(P)
	PUSHJ P,OCTPNT
	PUSHJ P,CRLF
	PUSHJ P,OPOUT
	POP P,TAC
	JUMPE TAC,CPOPJ
	MOVEI 0,0
	MOVE AC2,[ILDB TAC,TAC1]	;LOAD DATA UNLESS ENABLING ONLY 1 CACHE
	SKIPL TAC1,CPTAB(TAC)		;TAC1←BYTE POINTER TO DATA
	MOVE AC2,[MOVE TAC,TAC1]	;ONLY 1 CACHE. TAC1 IS DATA NOT BYTE POINTER
CRA.1:	XCT AC2				;GET DATUM
	DPB TAC,[POINT 3,0,20]		;STORE IN BITS 18-0
	BLKO APR,@0			;SEND DATA.
	ADDI 0,4			;ADVANCE RAM ADDRESS IN BITS 27-33
	TRNN 0,1000			;IF ADDRESS EXCEEDS =128 WE'RE DONE. (1B26)
	JRST CRA.1			;LOOP
	POPJ P,

;BYTE POINTERS TO THE CACHE RELOAD PROGRAMS FOR ALL POSSIBLE
;CONFIGURATIONS OF THE CACHE (ENCODED AS 0-17).  FOR THES SPECIAL
;CASES OF ONLY ONE CACHE ENABLED, THE TABLE CONTAINS THE DATA RATHER
;THAN A BYTE POINTER.
;10=CACHE 0
; 4=CACHE 1
; 2=CACHE 2
; 1=CACHE 3

CPTAB:	0			;00 no caches enabled
	3			;01 enable cache 3 only
	2			;02 enable cache 2 only
	440300,,CPT.03		;03 enable 2&3
	1			;04 enable cache 1 only
	440300,,CPT.05		;05 enable 1&3
	440300,,CPT.06		;06 enable 1&2
	440300,,CPT.07		;07 enable 1, 2 & 3
	0			;10 enable cache 0 only
	440300,,CPT.11
	440300,,CPT.12
	440300,,CPT.13
	440300,,CPT.14
	440300,,CPT.15
	440300,,CPT.16
	440300,,CPT.17

CPT.17:	012345673123		;0123
	212371271127
	656755670323
	022301234567
	077700074666
	446431331113
	077700070123
	456745574547
	012201210566
	056045654564
	012345670000

CPT.16:	012245612122		;012
	212211211121
	656255620626
	022601264560
	000000004666
	446451551115
	044400040125
	456445504540
	012201210566
	056045654564
	012645640000

CPT.15:	013345173133		;013
	313371371137
	151755170373
	077301734507
	077700074000
	440431331113
	077700070173
	450745574547
	015501510544
	054045454544
	015345470000

CPT.13:	032342673323		;023
	232373273327
	626722670323
	022307234067
	077700074666
	446437337773
	077700070723
	406740074047
	062206260466
	046044644464
	062344670000

CPT.07:	312315673123		;123
	212371271127
	656755677323
	722331232567
	377733372666
	226231331113
	777777777123
	156715571517
	512251216566
	656655655565
	612355670000

CPT.14:	015545115155		;01
	515511411141
	151455140444
	044401444500
	000000004000
	440451551115
	044400040145
	450445504540
	015501510544
	054045454544
	015445440000

CPT.12:	062242662422		;02
	242266266626
	626222620626
	022604264060
	000000004666
	446444444444
	044400040424
	406440004040
	062206260466
	046044644464
	062644640000

CPT.11:	033347773333		;03
	333373373337
	777777770373
	077307734007
	077700074000
	440437337773
	077700070773
	400740074047
	044404440444
	044044444444
	044344470000

CPT.06:	512215612122		;12
	212211211121
	656255621626
	122661262566
	666666662666
	226251551115
	555555555125
	156515521512
	512251216566
	656655655565
	612655660000

CPT.05:	313315173133		;13
	313371371137
	151755177373
	777331737577
	377733377777
	777731331113
	777777777173
	157715571517
	515551515555
	555555355535
	515355570000

CPT.03:	332372673323		;23
	232373273327
	626722677323
	722337232767
	377733372666
	226237337773
	777777777723
	776777777777
	362236266366
	636666666666
	662366670000
>;IFKL10
;DECOUT START SPDL THEEND

;START - USER MODE 200 STARTUP

DEFINE NPRINT(TAG,START,FINISH)
<	OUTSTR [ASCIZ\
	TAG\]
	MOVEI TAC,FINISH-START
	PUSHJ P,DECOUT
>

DEFINE QPRINT(TAG,START,FINISH,S2,F2)
<	OUTSTR [ASCIZ\
	TAG\]
	MOVEI TAC,FINISH-START
	PUSHJ P,DECOUT
IFN FTHSYS,<
	OUTCHR ["+"]
	MOVEI TAC,F2-S2
	PUSHJ P,DECOUT
>
>

DECOUT:	IDIVI TAC,=10
	HRLM TAC1,(P)
	JUMPE TAC,.+2
	PUSHJ P,DECOUT
	HLRZ TAC,(P)
	ADDI TAC,60
	OUTCHR TAC
	POPJ P,

↑START:	MOVE P,[IOWD 20,SPDL]	;FOR USE WITH DUMP COPY OF SYSTEM
	OUTSTR CONFIG		;SYSTEM NAME
	NPRINT <Impure part	>,0,CHKBEG
	QPRINT <System stuff	>,CHKBEG,DEVBEG,HIBEG,HIDVBG
	QPRINT <Device service	>,DEVBEG,CHKEND,HIDVBG,HIEND
IFN FTIP,<DEFINE IPBEG<NETSUB↑>;>DEFINE IPBEG<IPEND>
IFN FTDDT,<DEFINE IPEND<DDTBEG>;>DEFINE IPEND<BLTBEG>
IFN FTRH,<
	NPRINT <RH service	>,CHKEND,IPBEG
>;IFN FTRH
IFN FTIP,<
	NPRINT <IP/TCP code	>,IPBEG,IPEND
>;IFN FTIP
IFN FTDDT,<
	NPRINT <DDT		>,DDTBEG,BLTBEG
>;IFN FTDDT
	NPRINT <ONCE        	>,BLTBEG,THEEND
	HLRO TAC,116		;JOBSYM
	MOVNS TAC
	OUTSTR [ASCIZ/
	Symbols		/]
	PUSHJ P,DECOUT
	QPRINT <With DDT out	>,0,<--((RDDTA+777)&777000)>,HIBEG,HIEND
	EXIT

SPDL:	BLOCK 20

LIT↔VAR
THEEND:

BEND ONCE

PURGE STRQQQ,OPZERO		;SO FRAID CAN TYPE IOS

IFDEF SYSDSP,<
END SYSDSP		
>;IFDEF SYSDSP
