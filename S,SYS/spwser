COMMENT ⊗   VALID 00009 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00002 00002	SPWINI
C00003 00003	KILSPW KILSP1 P1REL P1REL1 P2REL P2REL1 OFSPW
C00005 00004	SPWCON SPW0 SPW4H SPW4G SPW1
C00008 00005	AC GO A B C D SPWP1 SPWPP3 SPWPPX SPWPP2 SPWPP9
C00011 00006	SPWPP4 SPWPP0 SPWPP6 SPWPP8 SPWP8A SPWNKL
C00017 00007	SPCLK1 SPCK1A SPCK1X SPCLK2 SPCK2X SPWINT SPWERR SPWXIT SP2INT
C00022 00008	SPWUUO SPWUU1 SPTMOE
C00023 00009	SPWUUX SPWUUY SPWUU0 SPWPPB SPWPPE SPWPPC
C00026 ENDMK
C⊗;
;SPWINI

BEGIN SPWSER ↔	 SUBTTL	 SPACEWAR SERVICE
; JAM. STANFORD, 8-NOV-68

LOSYS

;INITIALIZE ALL SPACEWAR TABLES

↑SPWINI:SETZM SPWGO			;ZERO OUT P1 SPW TABLE
	MOVE TAC,[SPWGO,,SPWGO+1]
	BLT TAC,JBTST2+JOBN-1		;CLEAR SPWGO,JBTST2
IFE FTF2,<
	CONI TV,SPWBUT			;SET UP SPW BUTTONS
>;IFE FTF2
	SETZM SPWACT			;KILL SPW JOB COUNT
	SETZM SPWUUF			;NOT AT SPACEWAR LEVEL ON EITHER PROCESSOR
	SETZM SPWTMO			;AND INITIALLY, NO TIMEOUT ACTIVE
	POPJ P,
;KILSPW KILSP1 P1REL P1REL1 P2REL P2REL1 OFSPW

;KILL 2-PROCESSOR SPACEWAR FOR JOB N
;CALL:	MOVE J,<JOB>
;	PUSHJ P,KILSPW		;KILLS SPACEWAR, SAVES AC'S

↑KILSPW:PUSH P,TAC
	MOVSI TAC,SPWSNB
	PUSHJ P,CLRSIN		;CLEAR ANY SPACEWAR SWAPIN REQUEST
	POP P,TAC
	PUSH P,TAC1
	SKIPN JBTST2(J)		;IS A JOB ACTIVE HERE?
	JRST KILSP1

IFN FTSTAT,<
	PUSH P,TAC
	MOVEI TAC,SPWSTA+7700
	PUSHJ P,STAPUT
	POP P,TAC
>;FTSTAT

	SKIPE SPWGO(J)		;DOES HE HAVE A P1 SPW JOB
	PUSHJ P,P1REL		;RELEASE SPW ON PDP 10
	SETZM JBTST2(J)
KILSP1:	POP P,TAC1
	POPJ P,

P1REL:	MOVEI TAC1,0
P1REL1:	MOVE TAC,TAC1
	LDB TAC1,[POINT JOBNSZ,SPWGO(TAC),JOBNSZ-1]
	CAME TAC1,J
	JUMPN TAC1,P1REL1
	JUMPE TAC1,CPOPJ
	LDB TAC1,[POINT JOBNSZ,SPWGO(J),JOBNSZ-1]
	DPB TAC1,[POINT JOBNSZ,SPWGO(TAC),JOBNSZ-1]
	SETZM SPWGO(J)
	SOS SPWACT
	POPJ P,

OFSPW:	PUSHJ P,KILSPW		;HERE IF HE GOOFS.
	JSP TAC,UUOMES
	ASCIZ /Attempt to initiate SPW job with one already running
UUO/
;SPWCON SPW0 SPW4H SPW4G SPW1

;SPWCON -  HERE FROM UUOCON TO SET UP A SPW JOB
; CALL FROM UUOCON:
;	MOVE UCHN,[MODE-BITS,,TICKS]
;	MOVE UUO,[ANYTHING,,STARTING ADDRESS]

↑SPWCON:MOVE J,JOB		;GET CURRENT JOB NUMBER
	MOVEI TAC,(UUO)		;GET STARTING ADDRESS
	JUMPN UCHN,SPW0		;ZERO TICKS?
	CAIN TAC,'SSW'		;STOP CODE?
	JRST KILSPW		;YES, STOP SPACEWAR
SPW0:	CAIGE TAC,140		;ABOVE JOB DATA AREA?
	JRST UADRER		;GIVE HIM ADDRESS CHECK FOR STARTING ADR
	XCTR XR,[MOVE TAC,(TAC)];ADDRESS CHECK HIS STARTING ADDRESS
	TLNN UCHN,200000	;REQUESTING P2?
	JUMPL UCHN,SPW1		;NO, HOW ABOUT P1?
SPW4H:	TLNN UCHN,200000	;WAS HE REALLY SURE ABOUT USING P2?
	JRST SPW1		;NO, TRY P1
	MOVEI TAC,[ASCIZ /
Spacewar request for P2, but P2 doesn't run spacewar anymore.
/]
	PUSHJ P,HNGMES
	JRST SPW4H

SPW1:	SKIPE SPWGO(J)			;P1 SPACEWAR.  ALREADY RUNNING ONE?
	JRST OFSPW			;YES, GO SHOOT HIM
	AOS SPWACT			;WE HAVE ONE MORE SPW JOB NOW

IFN FTSTAT,<
	HRRZ TAC,UCHN
	LSH TAC,6
	TRO TAC,SPWSTA			;FLAG P1
	PUSHJ P,STAPUT
>;FTSTAT

	MOVSI DAT,SPWRUN		;INDICATE THAT A JOB IS RUNNING
	TLNE UCHN,100000		;P1 TIMEOUT SUPRESSION?
	MOVSI DAT,SPWRUN!SPWNT1		;YES. SET TIMEOUT SUPRESSION BIT
	IORM DAT,JBTST2(J)		;PUT IN 'RUNNING' BIT
	TSO UCHN,SPWGO			;Copy header's link into RH of UCHN
	DPB J,[POINT JOBNSZ,SPWGO,JOBNSZ-1] ;Store new header
	HRLM UCHN,SPWGO(J)		;PUT JIFFIES and link IN LH
	HRRM UUO,SPWGO(J)		;PUT ADDRESS IN RH
	POPJ P,
;AC GO A B C D SPWP1 SPWPP3 SPWPPX SPWPP2 SPWPP9

;CLOCK LEVEL SPACEWAR ROUTINE


;FIRST, ACCUMULATOR RE-DEFINITIONS
AC←←DDB
GO←←DAT
A←←DSER
B←←UCHN
C←←UUO
D←←PROG
; REGISTER AC CONTAINS THE ADDRESS OF THE PROCESSOR'S AC STORAGE TABLE
; REGISTER GO CONTAINS SPWGO

↑SPWP1:	MOVEI AC,SPWA		;AC STORAGE FOR P1
	MOVEI GO,SPWGO		;APPROPRIATE RUN TABLE
	PUSH P,JOB		;SAVE SO WE CAN RUN SPW UUOS.
	SETOM SPWUUF		;FLAG SPACEWAR LEVEL.
	SETOM SPWRAN		;NO SPW HAS RUN YET, JOB DATA AREA NOT PUSHED
	HRLI GO,J		;INDEX SPWGO BY JOB NUMBER
	MOVEI J,0		;START AT FRONT OF LIST.
SPWPP3:	
	HGMAC(27)
	LDB J,[POINT JOBNSZ,@GO,JOBNSZ-1] ;LINK
	JUMPN J,SPWPP2		;DISPATCH IF NON-ZERO
	SKIPGE SPWRAN		;DID WE RUN ANY SPACEWAR ROUTINE?
	JRST SPWPPX		;NO, USRxxx IS STILL OK
	HRLI AC1,-USRJDA-20+USRPRT+1(P)
	HRRI AC1,USRPRT
	BLT AC1,USRJDA+17	;Restore saved USRxxx from stack
	SUB P,[USRJDA+20-USRPRT,,USRJDA+20-USRPRT]
SPWPPX:	POP P,JOB
;	MOVSI J,100000
;	IORM J,PAGREG		;FORCE APRMAP TO DO ITS WORK
	MOVE J,JOB		;PUT JOB NUMBER UP
	SETZM SPWUUF
	SKIPN JBTPAG(J)		;IF CORE 0 ON OLD JOB,
	MOVEI J,0		;SETUP MAP FOR NULL JOB NEXT
	AOS AMC15		;COUNT APRMAP COUNTER
	HGMAC(20)
	PUSHJ P,APRMAP		;SETUP PROTECT-RELOCATE OR PAGER TO OLD JOB
	HGMAC(27)
	POPJ P,			;PLEASE DON'T OPTIMIZE PUSHJ-POPJ

SPWPP2:	MOVE D,@GO		;GET LATEST COPY OF SPW WORD
	TRNE D,-1		;IS HE BEING FLUSHED?
	SKIPL A,JBTST2(J)	;IS THIS JOB RUNNABLE?
	JRST SPWPP3		;NO, EXIT NOW
	TLNN A,SPWST1		;IS HE SUSPENDED SOMEHOW?
	JRST SPWPP4		;NO, GO RUN HIM
	ADDI A,1		;INCREMENT THE SUSPENSION COUNT.
	HRRM A,JBTST2(J)	;STORE NEW SUSPENSION COUNT.
	JRST SPWPP3		;CONTINUE SCAN.

SPWPP9:	DPB A,[POINT 4,D,13]	;UPDATE COUNT
	MOVEM D,@GO		;REPLACE IN CONTROL WORD
	JRST SPWPP3
;SPWPP4 SPWPP0 SPWPP6 SPWPP8 SPWP8A SPWNKL

; HERE, WE KNOW THIS JOB IS RUNABLE. NOW, IS IT TIME TO RUN?

SPWPP4:	LDB A,[POINT 4,D,13]	; PICK UP SPW COUNT
	LDB B,[POINT 4,D,17]	; PICK UP SPW TIME
	JUMPE B,[JUMPN A,SPWPP9	;ZERO TICKS HE HAS RUN ONCE.
		 AOJA A,SPWPP0]	;RUN HIM HIS ONE TIME.
	CAIGE A,-1(B)		;WILL IT BE TIME WHEN WE INCREMENT A?
	AOJA A,SPWPP9		;NOT TIME YET. INCREMENT AND REPLACE.
	SETZ A,			;YES, ZERO COUNT AND RUN JOB
SPWPP0:	DPB A,[POINT 4,D,13]
	MOVEM D,@GO
	MOVE B,JBTST2(J)	;GET STATUS REGISTER
	HLLZS JBTST2(J)		;NOW ZERO ERROR DELAY COUNT
	TLNE B,SPWSUS		;SHOULD WE WARN HIM OF AN IMPENDING DELAY?
	JRST SPWPP6		;YES
	HRRZ B,B		;COUNT OF TICKS WHILE SUSPENDED.
	JRST SPWPP8		;RUN HIM.

SPWPP6:	TLO B,SPWSU1		;TELL JOB A SUSPENSION IS INDICATED P1
	MOVEM B,JBTST2(J)	;REPLACE JOB STATUS
	MOVNI B,1		;PUT WARNING IN B
SPWPP8:	MOVSI A,SPWNT1		;TIMEOUT SUPRESSION BIT (P1)
	TDNN A,JBTST2(J)	;SKIP IF TSB IS ON
IFE FTLLL,<
ifn ftf2,< printx Perhaps other F2's should have longer spacewar timeout? >;ifn ftf2
	MOVEI A,JIFSEC/2	;TIMEOUT IS HALF A SECOND
>;IFE FTLLL
IFN FTLLL,<
	MOVEI A,5*JIFSEC/2	;TOO MANY TIMEOUTS FROM WHO
>;IFN FTLLL
	HRRZM A,SPWTMO		;STORE THE TIMEOUT WORD
	MOVE A,[JRST 2,@UUO0]
	MOVEM A,SPWXCT		;SET UP THE UUO EXIT INSTRUCTION
				;WHICH IS CLOBBERED BY CH3 ON TIMEOUTS
	MOVEI TAC,0
	PUSHJ P,APREN2		;(APRENB UUO) FLUSH FOV ENB, AROV ENB
	AOSE SPWRAN		;Sys's job data area of current job no longer valid
	JRST SPWP8A		;NOT FIRST SPW RUN, USRxxx ALREADY SAVED
	MOVSI A,USRPRT		;SAVE USER CHANNEL TABLE.  (SOURCE)
	HRRI A,1(P)		;(DESTINATION)
	MOVEI TAC,USRJDA+20-USRPRT(P) ;(ENDING ADDRESS OF BLT)
	BLT A,(TAC)
	ADD P,[USRJDA+20-USRPRT,,USRJDA+20-USRPRT]
SPWP8A:	HRRZ A,AC
	BLT A,17(AC)		;BLT THEM INTO SPWA OR SPWB
	SETZM A(AC)		;AND ZERO OUT ACCUMULATOR A IN CORE
	HRRZ TAC,D		;GET JOB STARTING ADDRESS
	HRLI TAC,USRMOD!IOTUSR	;PUT IN IOT USER MODE AND USRMOD BITS
	PUSH P,TAC		;save starting PC and flag bits
	SKPNKL
	AOS AMC16		;COUNT APRMAP COUNTER
	HGMAC(30)
	PUSHJ P,APRMAP		;SETUP PROT-REL OR MAP, DEPENDING ON PROCESSOR
	PUSHJ P,U2S		;MOVE CRITICAL PART OF USER JOB DATA AREA TO SYSTEM
IFKL10,<
IFE FTMTRACT,<
	PUSHJ P,MTRJST		;SET UP ACCOUNTING METERS
>;IFE FTMTRACT
>;IFKL10
NOKL10,<
;F2 clobbers user shadow ACs when running user, so save user-level ACs
;This also allows us to make SPW UUOs really work, referencing SPW ACs.
	MOVEI 15,USRSAC		      ;Copy from user shadow ACs into special
	XCTR XBLTR,[BLT 15,USRSAC+17] ; area for protection.  Restored at SPWUUY.
>;NOKL10
	HGMAC(27)
	POP P,16		;get back the starting user PC and flags
	MOVSI 15,SAC2SH
	SKPNKL
	IORM 15,PAGREG		;SET SUPPRESS ACTOSH BIT FOR NEXT APRMAP CALL
	MOVN 15,J
	MOVSI 2,400000
	ROT 2,(15)
	SKPNKA
	DATAO PI,2		;TURN ON MI WITH JOB NUMBER.
IFKL10,<
	SKPKL			;if KL, move the ACs into the user's AC block
	JRST SPWNKL
	XCTR XW,[MOVEM 0,0]	;store AC 0 for user
	MOVE 0,[1,,1]		;source,,dest for BLT 
	XCTR XBLTW,[BLT 0,17]	;store rest of ACs in user's AC block
	DATAO KLPAG,[401000,,0]	;SET CURRENT AC BLK = 1, PREVIOUS = 0 (select user)
SPWNKL:
>;IFKL10
	SETOM STIME(J)		;FLAG THAT CORE IMAGE HAS BEEN RUN (I.E. MODIFIED)
	MOVE 15,J		;SAVE JOB NUMBER
	XCTR XR,[MOVE 7,JOBRL2]	;PROTECTION OF UPPER.
	MOVE 6,JBTSTS(J)
	MOVE 3,B		;GET FLAG REGISTER
	MOVEI 4,1
	SETOM 5
	MOVE 1,SPWBUT		;GET SPACEWAR BUTTONS FOR HIM

	MTRCOF (CH7)		;BOTH PROCESSORS HERE

	JRST 12,@16		;RUN SPACEWAR AT USER LEVEL, NOT PI HELD ON CH7
;SPCLK1 SPCK1A SPCK1X SPCLK2 SPCK2X SPWINT SPWERR SPWXIT SP2INT

;SPACEWAR CLOCK AND ERROR INTERRUPTS.  (BOTH PROCESSORS)

↑SPCLK1:MOVE 17,CLKS17			;RESTORE A CLOBBERED AC.
IFKL10,<SKIPE KLECON			;ANY ERROR?
	JRST SPWINT
>;IFKL10
	AOSN SPXITF
	JRST SPWUUY			;GOT TO CH7 FROM SPWUUX, CONTINUE AT SPWUUY

IFN FTXADR,<
;	SOSE SPWTMO			;DECREMENT TIMEOUT COUNT
;	XJEN CLKCHL			;HE'S OK.
>;IFN FTXADR
IFE FTXADR,<
;	SOSE SPWTMO			;DECREMENT TIMEOUT COUNT
;	JRST 12,@CLKCHL			;HE'S OK.
>;IFE FTXADR

	SOSN SPWTMO			;DECREMENT TIMEOUT COUNT
	JRST SPCK1A
	MTRCOF (CH7,P2NOCK)
IFN FTXADR,<
	XJEN CLKCHL			;HE'S OK.
>;IFN FTXADR
IFE FTXADR,<
	JRST 12,@CLKCHL			;HE'S OK.
>;IFE FTXADR

SPCK1A:	MOVEM TAC1,SPWBLO		;SAVE TAC1 A WHILE
	MOVE TAC1,[JRST SPTMOE]
	MOVEM TAC1,SPWXCT		;MAKE SURE WE CATCH UUOCON EXITING
	MOVE TAC1,CLKCHL		;USER MODE?
	TLNN TAC1,USRMOD		
	JRST SPCK1X			;NO.  CAN'T STOP HIM DURING A UUO.
IFN FTXADR,<
	MOVSI TAC1,PCU
	MOVEM TAC1,CLKCHL
	MOVEI TAC1,SPTMOE
	EXCH TAC1,CLKCHL+1		;CLKCHL←NEW ADDRESS, TAC1←USER'S PC
>;IFN FTXADR
IFE FTXADR,<
NOKL10,<MOVEI TAC1,SPTMOE		;ADDRESS TO WHICH TO DISMISS CHANNEL 7
>;NOKL10
IFKL10,<MOVE TAC1,[PCU,,SPTMOE]		;ADDRESS TO WHICH TO DISMISS CHANNEL 7
>;IFKL10
	EXCH TAC1,CLKCHL		;CLKCHL←NEW ADDRESS, TAC1←USER'S PC
>;IFE FTXADR
	CAIA
SPCK1X:	MOVE TAC1,UUO0
	EXCH TAC1,SPWBLO		;RESTORE TAC1, SAVE PC OF UUO

	MTRCOF (CH7,P2NOCK)

IFN FTXADR,<
	XJEN CLKCHL			;CATCH LOSER ON WAY OUT OF UUO
>;IFN FTXADR
IFE FTXADR,<
	JRST 12,@CLKCHL			;CATCH LOSER ON WAY OUT OF UUO
>;IFE FTXADR


↑SPWINT:
NOKL10,<CONI APR,A
	CONO APR,531110+APRCHN		; CLEAR ANY CONCEIVABLE ERROR
>;NOKL10
IFN FTF2,<
	SKIPE F2ILM
	IORI A,ILM		;Simulate ILM flag being on if page fault on F2
	SETZM F2ILM		;Clear simulation flag
>;IFN FTF2
IFKL10,<MOVE A,KLECON			;ERROR INTERRUPTS IN CHANNEL 7
	SETZM KLECON
	TLZE A,PCPUBL			;PROPRIETARY VIOLATION?
	TLO A,ILMSPW
>;IFKL10
	TRNE A,ILM
	TLO A,ILMSPW
IFE FTF2,<
	TRNE A,NXM
	TLO A,NXMSPW
>;IFE FTF2
	TRNE A,POV
	TLO A,POVSPW

NOKL10,<HRR A,APRCHL		;GET LOCATION OF ERROR	>;NOKL10
IFKL10,<
IFN FTXADR,<
	HRR A,CLKCHL+1		;GET PC OF ERROR 	>;IFKL10
>;IFN FTXADR
IFE FTXADR,<
	HRR A,CLKCHL		;GET PC OF ERROR 	>;IFKL10
>;IFE FTXADR
	MOVEM A,SPWA+A		; SET INTO SAVED ACCUMULATOR
	MOVEI PID,P1PID
NOKL10,<JRST 10,SPWUUX		; TREAT AS A UUO (BACK TO UUO LEVEL)>;NOKL10
IFKL10,<JRST SPWUUY		; TREAT AS A UUO (STAY AT CH7 LEVEL)>;IFKL10
	

↑SPWERR:MOVE J,JOB		;HERE FOR MISCELLANEOUS ERRORS (E.G. WSCHED)
	MOVE A,UUOPC(J)
	HRLI A,UUOSPW
	MOVEM A,SPWA+A
↑SPWXIT:MOVE P,SPWA+P		;COME HERE ON DISMIS UUO(SEE US BE SNEAKY)!
	AOBJP P,.+1		;GET OLD UUOPC (SAVED BY SPWUUO)
	POP P,UUOPC(J)		;RESTORE UUO-LEVEL PC WORD
	JRST SPWUUX
;SPWUUO SPWUU1 SPTMOE

↑SPWUUO:
;UUO ON P1
SPWUU1:	MOVE J,J+SPWA		;GET JOB NO. OF SPW JOB.
	MOVEM J,JOB		;PUT WHERE UUOCON WILL SEE IT.
	MOVE P,SPWA+P		;GET A PDL FOR UUOCON.
	PUSH P,UUOPC(J)		;AND SAVE THE OLD UUO PC WORD
	MOVE DAT,UUO0		;PICK UP RETURN
	MOVE UUO,@UUOLOC	;AND UUO ITSELF
	JRST UUOSY1		;LET UUOCON HANDLE IT.

↑SPTMOE:			;HERE IN EXEC MODE IN CH7 FOR TIME-OUT
	MOVEI PID,P1PID		;ASSUME WE ARE P1.
	MOVSI A,ILLTMO		;SET TIMEOUT BIT
	HRR A,SPWBLO		;LOOK AT HOW WE WERE SHOT DOWN
	MOVEM A,SPWA+A
	JRST SPWUUX		;PRETEND UUO (CH7 OR UUO LEVEL)
;SPWUUX SPWUUY SPWUU0 SPWPPB SPWPPE SPWPPC

;SPWUUX, SPWUUY - DISMISS OR ERROR IN SPW MODE JOB

;EVERYONE GETS HERE AND THEY ARE ALL AT UUO LEVEL
↑SPWUUX:CONSZ PI,400		;SKIP UNLESS IN PROGRESS ON CHANNEL 7
	JRST SPWUUY		;WE'RE ALREADY IN CHANNEL 7.
	SYSPIFF
	HLLOS CLKFLG		;TELL CH7 WE ARE COMING
	SETOM SPXITF		;NOW TELL CH7 WHY
	CONO PI,4000!1⊗<7-CLKCHN>!PION
	CONO PI,0
	HALT .

;JUMP HERE FROM SPWINT IF KL10, FROM SPCLK1/2 IF KA OR PDP-6 OR KL
;WE ARE NOW IN CHANNEL 7 AGAIN
↑SPWUUY:
IFKL10,<DATAO KLPAG,[400100,,0]	;SET CURRENT AC BLOCK = 0, PREVIOUS = 1
>;IFKL10
NOKL10,<MOVSI 17,USRSAC		;Now restore user-level ACs to shadow area
	XCTR XBLTW,[BLT 17,17]	; since SPW routine has finished running
>;NOKL10
	MOVSI 17,SPWA		;RESTORE P1 ACCUMULATORS
	BLT 17,17
	PUSHJ P,S2U		;Move critical part of job data area back to user
	SETZM SPXITF
	JUMPE A,SPWUU0		;NO ERRORS, SCAN FOR NEXT JOB.
	HLLZS @GO		;ERROR, KILL THIS JOB
	TLO A,SPWERB		;ADD ERROR BIT TO THOSE ALREADY THERE
	MOVEM A,JBTST2(J)	;MOVE IN ERROR BIT
SPWUU0:	JRST 2,@[SPWPPB]

SPWPPB:	SKIPN @GO
	JRST SPWPPC
	LDB A,[POINT 4,@GO,17]	;GET HIS TIME FIELD 
	JUMPN A,SPWPPC
	PUSHJ P,P1REL		;ZERO TICKS. RELEASE P1 SPACEWAR
	SETZM JBTST2(J)		;ZERO THIS IF NOT SPW ACTIVE ON OTHER P.
SPWPPC:	MOVE A,JBTST2(J)	;PICK UP JOB STATUS
	MOVSI D,SPWST1!SPWST2	;NONE ON P2. GET BOTH PROC. SUSP BITS.
	TLZE A,SPWSU1		;HAS WARNING BEEN GIVEN?
	TDO A,D			;YES, SUSPEND THIS JOB
	TLC A,SPWST1!SPWST2	;ARE BOTH NOW SUSPENDED?
	TLCN A,SPWST1!SPWST2
	TLZ A,SPWSUS		;BOTH NOW SUSPENDED, CLEAR SUSPENSION REQ.
	MOVEM A,JBTST2(J)	;AND REPLACE JOB STATUS
	JRST SPWPP3

BEND SPWSER
