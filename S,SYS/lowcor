COMMENT ⊗   VALID 00007 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00003 00002	 SHDACS CHKBEG HIBEG HIBEG TPOPJ1 TPOPJ CPOPJ2 CPOPJ1 PIONJ CPOPJ FMCHK ZSHAD2 ZSHAD ZSHAD3 ZSHD3A ZSHD3B ZSHAD1 ZSHD1A ZSHD1B USRSHD ZSHDKL
C00010 00003	 PWAIT XWAIT PWAIT P1XIT PWP2HG PWP2H2 P1L0 P1L00 P1L01 XWAIT XWLOSE
C00015 00004	 DEVOPR CONFIG DOMNAM PUUOAC PIOMOD PJOBN PDVBLN PUNIT PSEGN PDSEGN PSINF0 PSINFJ PSINFT PSINB0 PSINBJ PSINBT PAGJOB PGJBYP PGJMSK PMONTB PRUNB PDVTIM PDVCNT IMGIN IMGOUT IMGINT SYSPPN DUMPPN CUSPPN HELPPP
C00019 00005	 MONTAB MIDNIT QNAMS BITTAB CBCTAB
C00021 00006	  HISTOGRAM STATISTIC GATHERING ROUTINE.  HG HG4
C00024 00007	Network stuff  CLSTP RFNMTP RETRTP ALLTP RFCTP INPTP IDLETP ARPAGW ARPAGN ETHGW ETHGN ETHRTS ETHRTN ARPAGW ARPAGN ETHGW ETHGN DOMSRV NDOMSR
C00031 ENDMK
C⊗;
;⊗ SHDACS CHKBEG HIBEG HIBEG TPOPJ1 TPOPJ CPOPJ2 CPOPJ1 PIONJ CPOPJ FMCHK ZSHAD2 ZSHAD ZSHAD3 ZSHD3A ZSHD3B ZSHAD1 ZSHD1A ZSHD1B USRSHD ZSHDKL

SUBTTL LOWCOR 6 SEPT 67


SHDACS:	BLOCK 20	;ACS STORED HERE DURING ZSHAD

; BEGINNING OF PROTECTED PART OF MONITOR . . .
LOC <.+777>&777000		;NEXT PAGE BOUNDARY
CHKBEG←←.
IFL CHKBEG-100,<PRINTX You better tell WHOPHN that CHKBEG grew!>
HIBEG←←0
IFN FTHSYS,<
	HISYS
	HIBEG←←.		;FOR USER-MODE STARTUP (SEE ONCE)
	LOSYS
>;FTHSYS

;; ON THIS PAGE LIE SOME VERY COMMON AND USEFUL ROUTINES . . .

TPOPJ1:	AOS -1(P)		;RESTORE TAC THEN SKIP RETURN
TPOPJ:	POP P,TAC		;RESTORE TAC
	POPJ P,			;AND RETURN

CPOPJ2:	AOS (P)			;DOUBLE SKIP SUBROUTINE RETURN
CPOPJ1:	AOS (P)			;SKIP SUBROUTINE RETURN
	POPJ P,

PIONJ:	SYSPIN
CPOPJ:	POPJ P,

IFE FTF2,<
IFN PRCONF-1,<			;EITHER VERSION THAT INCLUDES KA10
FMCHK:	SKPNKA			;SKIP IF NOT THE KA10
	PUSHJ	P,ZSHAD2
	JRST	CPOPJ1		;FM ENB OK
	MOVE	TAC,[440700,,[ASCIZ/TURN ON FM ENB.  THEN CONTINUE.
/]]
	JSR	DDTTYP
	POP	P,DDTTYP
	JRST	4,@DDTTYP
>;PRCONF≠1

IFE PRCONF-1,<	FMCHK:	JRST	CPOPJ1	>


ZSHAD2:	PUSH	P,[JFCL]
	JRST	ZSHAD3
>;IFE FTF2

;Here from PARSER and SYSINI.  The map must be on already.
ZSHAD:
IFE FTF2,<
	SKPKA			;IS THIS THE KA10?
	JRST ZSHDKL		;No, use different trick, don't check FM ENB
	PUSH	P,[CONO PAG,7]
ZSHAD3:
IFE FTMAOFF,<
	PUSH P,40+MATOFF	;SAVE THE UUO LOCATIONS
	PUSH P,41+MATOFF
>;IFE FTMAOFF
IFN FTMAOFF,<
	CONSO	APR,MAOFF	;IS KA IN MAOFF MODE?
	JRST	ZSHD3A		;NO.
	PUSH	P,140		;SAVE THE UUO LOCATIONS
	PUSH	P,141
	JRST	ZSHD3B

ZSHD3A:	PUSH	P,40
	PUSH	P,41
ZSHD3B:
>;IFN FTMAOFF
	CONO PAG,4		;TURN OFF MAPPING
	MOVEM	17,SHDACS+17	;SAVE THE REAL AC'S SO WE DON'T ZERO THEM
	MOVEI	17,SHDACS
	BLT	17,SHDACS+16
	MOVE	0,[JRST ZSHAD1]
IFE FTMAOFF,<
	MOVEM 0,41+MATOFF	;SET TO TRAP OUR ILLEGAL INSTRUCTION
>;IFE FTMAOFF
IFN FTMAOFF,<
	CONSZ	APR,MAOFF
	MOVEM	0,141		;SET TO TRAP OUR ILLEGAL INSTRUCTION
	CONSO	APR,MAOFF
	MOVEM	0,41		;SET TO TRAP OUR ILLEGAL INSTRUCTION
>;IFN FTMAOFF
	MOVE	17,[776000,,2000]
	DATAO	APR,17
	MOVSI	17,USRSHD
	BLT	17,17
	JRST	1,1		;RUN USER MODE CODE IN ACS

ZSHAD1:	EXCH	SHDACS		;SHDACS←0 IF NO FM ENB
	MOVE	17,[SHDACS+1,,1]
	BLT	17,17
IFE FTMAOFF,<
	POP P,41+MATOFF		;RESTORE UUO LOCATIONS
	POP P,40+MATOFF
>;IFE FTMAOFF
IFN FTMAOFF,<
	CONSO	APR,MAOFF
	JRST	ZSHD1A
	POP	P,141
	POP	P,140
	JRST	ZSHD1B

ZSHD1A:	POP	P,41		;ARGGG--THIS NEVER WORKED--WAS 40, NOT 41!!! 22 Mar 80
	POP	P,40
ZSHD1B:
>;IFN FTMAOFF
	DATAO	APR,[776000,,0]
	XCT	(P)
	POP	P,(P)
	SKIPN	SHDACS
	AOS	(P)		;SKIP RETURN IF FM ENB OFF
	POPJ	P,
>;IFE FTF2
IFN FTF2,<
;In general, an F2 doesn't need its shadow core cleared because most stores
;to ACs also overwrite shadow memory.  We do it anyway for completeness.  We
;could also make ZSHDKL work for F2, but this is shorter. -- TVR/May81
	PUSH P,TAC
	MOVSI TAC,-20		;Do all of the AC's 
	SETMM (TAC)		;This writes into shadow core before the F2
				;realizes it is an AC.  MOVES should do this,
				;but i don't think it does.
	AOBJN TAC,.-1		;Repeat for each AC.
	POP P,TAC
	POPJ P,
>;IFN FTF2

IFE FTF2,<
USRSHD:	-1			;GETS LOADED INTO ACS (STARTING AT ZERO)
	SETZM -2000		;CLEAR SHADOW ZERO
	BLT 17,-2000+17		;BLT ACS INTO SHADOW MEM
	JRST 4,			;GET BACK TO EXEC MODE
	BLOCK USRSHD-.+17
	0,,-2000		;17

;Here from ZSHAD if machine is a KL
ZSHDKL:	PUSH P,TAC
	MOVSI TAC,PWRT		;READ WRITE EXECUTE ACCESS, PAGE ZERO
	MOVEM TAC,EXPGT+PAREXP
IFKL10,<BLKO KLPAG,PAREXP⊗9	;FLUSH PAGE MAP FOR PAREXP
>;IFKL10
	SETZM PAREXP⊗9+0	;CLEAR FIRST LOCATION OF SHADOW ACS
	MOVE TAC,[PAREXP⊗9,,PAREXP⊗9+1]
	BLT TAC,PAREXP⊗9+17	;CLEAR ALL SHADOW ACS
	SETZM EXPGT+PAREXP
IFKL10,<BLKO KLPAG,PAREXP⊗9	;FLUSH PAGE MAP FOR PAREXP
>;IFKL10
	POP P,TAC
	POPJ P,
>;IFE FTF2

;⊗ PWAIT XWAIT PWAIT P1XIT PWP2HG PWP2H2 P1L0 P1L00 P1L01 XWAIT XWLOSE

IFE FTP2,<
↑PWAIT:
↑XWAIT:	JRST CPOPJ1		;No P2, no interlock, no waiting
>;IFE FTP2
IFN FTP2,<
BEGIN PWAIT

;XXXCSC:	0		;-1 IF P1 WANTS IT OR HAS IT.
;		0		;-1 IF P2 WANTS IT OR HAS IT.
;		0		;0 IF P1 HAD IT LAST, -1 IF P2 HAD IT LAST
;		0		;IF GREATER THAN ZERO, THE NUMBER OF TIMES
				;SOME PROCESSOR HAS THE SYNCRONIZER.


↑PWAIT:	MTRON (MTRPWT)
	PUSH P,TAC		;SAVE AN AC
	XCT @-1(P)		;TAC←CONTROL CELL ADDRESS
	PUSH P,TAC1
	CONI PI,TAC1
	ANDI TAC1,PION
	SKIPE 3(TAC)		;IS THE SYNCHRONIZER ALREADY GRANTED?
	SKIPN (TAC)		;YES.  GRANTED TO P1?
	JRST P1L0		;NEED TO SYNCHRONIZE
P1XIT:	AOS 3(TAC)		;COUNT US AGAIN AS A SYNCHRONIZER USER
	CONO PI,(TAC1)		;RESTORE STATE OF PI IN CASE WE TURNED IT OFF.
	SETZM 2(TAC)		;AND SET TOGGLE TO P1
	POP P,TAC1
	MTROFF (MTRPWT)
	JRST TPOPJ1		;RESTORE TAC AND RETURN.

PWP2HG:	SETZM DETFLG		;P2 HUNG, TELL THE WORLD
	SETZM P2NUM		;TELL P2 TOO
	PUSHACS
	PUSHJ P,DISGST		;PRINT TIME OF NEW MESSAGE ON CTY
	PUSHJ P,DISMES
	ASCIZ /P2 hung at PWAIT!
/
	SKIPE DIDLOD		;HAVE I ALREADY RELOADED?
	JRST PWP2H2		;YES, DON'T KEEP TRYING
	SETOM DIDLOD		;FLAG THAT IT'S BEEN DONE
	PUSHJ P,DISMES		;TELL SOMEONE
	ASCIZ /πI'll try to reload P2.
/
	MOVEI TAC,['P2LOAD'↔'  1  2'↔<REAPRV!ACWPRV,,0>↔0]
	PUSHJ P,FIREUP
	 JFCL			;TOUGH
PWP2H2:	POPACS
	SETZM (TAC)
	SETZM 1(TAC)
	SETZM 2(TAC)
	SETZM 3(TAC)
	JRST P1L01		;FAKE P2 LETTING GO

P1L0:	PUSH P,TAC1
	SKIPN TTYLOK
	SKIPE MAINTM		;DEBUGGING?
	SKIPA TAC1,[377777,,-1]	;YES, WAIT FOREVER
	MOVE TAC1,WAITCT	;TIME LIMIT FOR P2 TO LET GO
	TLZ TAC1,400000		;LET -1 MEAN INFINITE
	CAIGE TAC1,-1		;THIS IS THE MINIMUM
	MOVEI TAC1,-1		; SO ZEROING IT WON'T DESTROY THE WORLD
P1L00:	SKIPE 1(TAC)		;WAIT FOR P2 TO NOT BE REQUESTING
	SOJG TAC1,P1L00
	JUMPLE TAC1,PWP2HG	;P2 HUNG
P1L01:	POP P,TAC1
	SYSPIFF		;KEEP OUT INTERRUPTS
	SETOM (TAC)		;SET OUR REQUEST.
	SKIPN 1(TAC)		;IS P2 REQUESTING?
	JRST P1XIT		;NO.  WE HAVE IT!
	CONO PI,(TAC1)		;REENABLE INTS.
	SKIPN 2(TAC)		;P2 REQUESTING.  DID WE HAVE SYNC. LAST?
	SETZM (TAC)		;YES.  DROP REQUEST AND LET P2 HAVE IT.
	JRST P1L0		;WAIT FOR P2 TO DROP ITS REQUEST

↑XWAIT:	MTRON (MTRXWT)
	PUSH P,TAC
	XCT @-1(P)
	SKIPG 3(TAC)		;SKIP IF WINNING
	JRST XWLOSE		;OVER XSYNCED.
	SOSG 3(TAC)		;DECREMENT THE COUNT OF NUMBER OF TIMES SYNCED
	SETZM (TAC)		;DROP P1'S REQUEST.
	MTROFF (MTRXWT)
	JRST TPOPJ1

XWLOSE:	PUSHACS
	PUSHJ P,DISGST		;PRINT TIME OF NEW MESSAGE ON CTY
	PUSHJ P,DISMES
	ASCIZ /OVER XSYNC'ED.  PC = /
	HRRZ TAC,-21(P)		;-1 FOR PUSH P,TAC
	PUSHJ P,DISLOC
	PUSHJ P,DISCRL
	PUSHJ P,DISFLU
	POPACS
	PUSHJ P,WDDTCAL
	SETZM (TAC)		;CLEAR P1'S CELL
	SETZM 3(TAC)
	JRST TPOPJ1

BEND PWAIT
>;IFN FTP2
;⊗ DEVOPR CONFIG DOMNAM PUUOAC PIOMOD PJOBN PDVBLN PUNIT PSEGN PDSEGN PSINF0 PSINFJ PSINFT PSINB0 PSINBJ PSINBT PAGJOB PGJBYP PGJMSK PMONTB PRUNB PDVTIM PDVCNT IMGIN IMGOUT IMGINT SYSPPN DUMPPN CUSPPN HELPPP

DEVOPR:	SIXBIT /CTY/		;OPERATORS CONSOLE DEVICE = CTY.
				;PUBLIC LOGICAL NAME "OPR" WILL BE THIS DEVICE
				;ALSO UNEXPLAINED MONITOR ERROR MESSAGE WILL BE TYPED
				;ON TTY OPR(FIRST TTY TYPED ON IF DEVOPR=0)

;SYSTXT and DOMTXT are defined in HEAD
CONFIG:	SYSTXT
DOMNAM:	DOMTXT

;BYTE POINTERS

PUUOAC:	POINT	4,UUO,12		;UUO AC FIELD
PIOMOD:	POINT	4,IOS,35		;MODE BITS
PJOBN:	POINT	JOBNSZ,DEVJBN(DDB),JOBNPS    ;DEVICE JOB ASSIGNMENT
PDVBLN:	POINT	PDVBSZ,DEVCHR(DDB),35	     ;DEVICE BUFFER LENGTH
PUNIT:	POINT	PUNITS,DEVUNI(DDB),35-PUNITP ;DEVICE UNIT NO.
PSEGN:	POINT	JOBNSZ,JBTSTS(J),35	;NUMBER OF HIGH SEGMENT THIS JOB HAS
PDSEGN:	POINT	JOBNSZ,(AC1),35		;JOB NUMBER OF SEGMENT IN JBTDTS FS.  SIGN
					;BIT IS ONLY OTHER BIT USED IN JBTDTS FS.
Intern PUNIT

PSINF0:	POINT	JOBNSZ,JBTSIN,35	;HEAD OF LIST, FORWARD LINK
PSINFJ:	POINT	JOBNSZ,JBTSIN(J),35	;FORWARD LINK (J)
PSINFT:	POINT	JOBNSZ,JBTSIN(TAC),35	;FORWARD LINK (TAC)
PSINB0:	POINT	JOBNSZ,JBTSIN,35-JOBNSZ	;HEAD OF LIST, BACKWARD LINK
PSINBJ:	POINT	JOBNSZ,JBTSIN(J),35-JOBNSZ ;BACKWARD LINK (J)
PSINBT:	POINT	JOBNSZ,JBTSIN(TAC),35-JOBNSZ ;BACKWARD LINK (TAC)

;Make sure the JBTSIN bits haven't run into the job number link fields.
IFN <1⊗<2*JOBNSZ>-1>&<JALSIN,,0>,<.FATAL JBTSIN link and bit fields overlap!!>

PAGJOB:	POINT JOBNSZ,PAGREG,17+JOBNSZ	;High bits of RH hold job number
PGJBYP←←<(<POINT JOBNSZ,0,<=17+JOBNSZ>>)> ;Byte for getting job field from ACs
PGJMSK←←0,,<-1⊗=18-JOBNSZ>		;Mask for PAGREG job field

PMONTB:	POINT	6,MONTAB(TAC),5		;POINTER TO NO. DAYS IN MONTH

REPEAT 0,<
PRUNB:	POINT	2,JB2STS(J),16		; POINTER TO PROCESSOR RUN BITS
>

PDVTIM:	POINT	6,DEVCHR(DDB),17	;TIME IN SECONDS BEFORE DEVICE
					;IS SAID TO BE HUNG
PDVCNT:	POINT	6,DEVCHR(DDB),11	;COUNTER DOWN EACH SECOND,
					;1 TO 0 TRANSITION MEANS HUNG DEVICE


IMGIN:	POINT 9,JBTSWP(J),35		;POINTER TO INCORE IMAGE (PAGES)
IMGOUT:	POINT 9,JBTSWP(J),26		;POINTER TO OUTCORE IMAGE
IMGINT:	POINT 9,JBTSWP(DDB),35		;POINTER TO INCORE IMAGE

↓SYSPPN:	SIXBIT /  1  1/			;1,1 IS SYSPPN ;JS
↓DUMPPN:	SIXBIT /  1  2/			;1,2 IS DUMPPP  ;JS
↓CUSPPN:	SIXBIT /  1  3/			;1,3 IS CUSP AREA
HELPPP:		SIXBIT /100100/			;100,100 IS HELPPP AND DEMOS ;JS
;⊗ MONTAB MIDNIT QNAMS BITTAB CBCTAB

;MONTH TABLE FOR DAYTIME PRINTING

MONTAB:	=30B5+"Jan"
	=27B5+"Feb"
	=30B5+"Mar"
	=29B5+"Apr"
	=30B5+"May"
	=29B5+"Jun"
	=30B5+"Jul"
	=30B5+"Aug"
	=29B5+"Sep"
	=30B5+"Oct"
	=29B5+"Nov"
	=30B5+"Dec"
MIDNIT: =60*=60*=24*JIFSEC		;NO OF JIFFIES TILL MIDNIGHT


; THE FOLLOWING IS A LIST OF THE ASCII NAMES OF THE QUEUES
; SO SYSTAT CAN READ THEM

QNAMS:
DEFINE X!(A) {<ASCII /A!Q   />}
	QUEUES
	CODES
	PQUES
	ASCII /CMQ  /	; DON'T FORGET COMMAND WAIT!!

;Table of bits, used by DSKSER, IMPMAC.MAC, and maybe elsewhere.

BITTAB:	400000,,0
	200000,,
	100000,,
	 40000,,
	 20000,,
	 10000,,
	  4000,,
	  2000,,
	  1000,,
	   400,,
	   200,,
	   100,,
	    40,,
	    20,,
	    10,,
	     4,,
	     2,,
	     1,,
		400000
		200000
		100000
		 40000
		 20000
		 10000
		  4000
		  2000
		  1000
		   400
		   200
		   100
		    40
		    20
		    10
		     4
		     2
		     1

;Left half of byte pointers to indicate byte position in computing correct
;byte count for buffered I/O, used by IMPSER and PUPSER.
↑CBCTAB:POINT 8,0,31
	POINT 8,0,7
	POINT 8,0,15
	POINT 8,0,23
;  HISTOGRAM STATISTIC GATHERING ROUTINE. ;⊗ HG HG4
;
;	CALL:	PUSHJ P,HG
;		RETURN HERE ALWAYS
;
;	CURRENTLY, THIS ROUTINE IS CALLED (ONLY) BY KBDINT.
;and now also by receive interrupts from the DCA.
;	THUS, STATISTICS ARE GATHERED ON EVERY KEYSTROKE OF EVERY
;MICROSWITCH KEYBOARD.
;	THIS ROUTINE, ONCE EVERY HGSET TIMES IT IS CALLED, WILL
;INCREMENT ONE & ONLY ONE OF THE 5 COUNTERS: HGCH6,HGUSR,HGSPW,HGUUO,
;HGSYS.  IN ADDITION, IF HGSYS IS INCREMENTED, THEN ONE OF THE
;COUNTERS HGCNTS WILL BE INCREMENTED, AND IF HGUSR IS INCREMENTED
;AT A TIME WHEN THE NULL JOB IS RUNNING, THEN EITHER HGNULL OR HGIDLE
;DEPENDING ON THE STATE OF <TQ+RUNQ>.
;
;	THIS ROUTINE CLOBBERS ACCUMULATOR TAC, RETURNS WITH POPJ P,.
;NO OTHER ACCUMULATORS ARE USED.

IFN FTHG,<
HG:	SOSE HGYET		;TIME TO DO OUR THING YET?
	POPJ P,			;NO.
	MOVE TAC,HGSET
	MOVEM TAC,HGYET		;RESET TIMER
	CONSZ PI,40		;CH2 ACTIVE?
	AOS HGCH2		;YES. COUNT IT
	CONSZ PI,1000		;CHANNEL 6 IN PROGRESS?
	AOSA HGCH6		;YES, INCREMENT OUR COUNTER AND RETURN
	SKIPA TAC,CH5		;ELSE, GET PC WORD
	POPJ P,			;RETURN FOR CH6 ACTIVE.
	TLNN TAC,USRMOD		;WE INTERRUPTED A USER?
	JRST HG4		;NO. WE'RE IN THE SYSTEM
	SKIPE SPWUUF
	AOSA HGSPW		;YES - SPACEWAR USER
	AOSA HGUSR		;NO. PLAIN USER CODE.
	POPJ P,
	SKIPE JOB		;NULL JOB RUNNING?
	POPJ P,			;NO
	SKIPGE JBTQ-RUNQ	;IS THIS IDLE OR WASTED
	SKIPL JBTQ-TQ
	AOSA HGNULL		;WASTED TIME (RUNQ OR TQ NOT EMPTY)
	AOS HGIDLE		;IDLE TIME.
	POPJ P,

HG4:	CONSO PI,400		;CHANNEL 7 IN PROGRESS?
	AOSA HGUUO		;NO WE'RE IN A UUO.
	AOSA HGSYS		;WE INTERRUPTED CHANNEL 7.
	POPJ P,
	HRRZ TAC,HGCODE		;GET IDENTIFICATION CODE
	CAIL TAC,HGNMAX		;A LEGAL CODE?
	MOVEI TAC,0		;NO, MAKE IT THE DEFAULT CODE
	AOS HGCNTS(TAC)		;INCREMENT APPROPRIATE HISTOGRAM COUNTER
	POPJ P,
>
;Network stuff ;⊗ CLSTP RFNMTP RETRTP ALLTP RFCTP INPTP IDLETP ARPAGW ARPAGN ETHGW ETHGN ETHRTS ETHRTN ARPAGW ARPAGN ETHGW ETHGN DOMSRV NDOMSR

;Pointers into timeout fields in IMPDDB and PUPDDB.
;Each field is number of 2-second units

↑CLSTP:	POINT 6,TIMES(DDB),5	;close
↑RFNMTP::			;(old name - RFNM timeout)
↑RETRTP:POINT 6,TIMES(DDB),11	;retransmission
↑ALLTP:	POINT 6,TIMES(DDB),17	;allocation
↑RFCTP:	POINT 6,TIMES(DDB),23	;connection
↑INPTP:	POINT 6,TIMES(DDB),29	;input
↑IDLETP:POINT 6,TIMES(DDB),35	;idle connection (PUPSER only)

;Gateway tables, used by TARGET in IMPSER.  These are the default
;gateways used on each network when we know no better route to a host.
;They are listed in order of preference, based on Arpanet and Milnet
;assignments in the files NETINFO:ARPA-MAILBRIDGE-HOMINGS.TXT and
;MIL-MAILBRIDGE-HOMINGS.TXT at SRI-NIC.ARPA.

IFN FTSUAI,<
ARPAGW:	IMPHST(4,=51)	;SRI-MILNET-GW  (First home gateway for SAIL)
	IMPHST(2,=22)	;ISI-MILNET-GW	(Second home gateway)
	IMPHST(2,=28)	;ARPA-MILNET-GW	(Other ARPA/MILNET gateways)
	IMPHST(5,5)	;BBN-MILNET-GW
	IMPHST(7,=20)	;DCEC-MILNET-GW
	IMPHST(0,=68)	;LBL-MILNET-GW
	IMPHST(2,=80)	;SAC-MILNET-GW
;JJW 6/87 - We tried putting Golden-Gateway first in the list but this
;caused problems since it doesn't always have correct routing information.
	IMPHST(1,=11)	;Golden-Gateway
ARPAGN←←.-ARPAGW

ETHGW:	SUHOST(=86,=94)	;MJH-A-GATEWAY (only gateway on SAIL's subnet)
ETHGN←←.-ETHGW

;Static routing entries for networks reachable via Ethernet.  If we are a
;multi-homed host (i.e. SAIL), we need this list to be able to choose the
;best interface for outgoing connections.  Such a list isn't needed for
;Arpanet, since it is our primary interface, i.e. the default for unknown
;addresses.  This list is derived from /usr/sun/bootfile/network-confg on
;the Unix hosts used to boot the Stanford Tips and Gateways, which should
;be checked periodically.  Each entry is two words, a network number and a
;mask.

ETHRTS:	IPHOST(=192,=26,=25,0)	;LUCID			(via 36.8.0.136)
	IPHOST(=255,=255,=255,0)
	IPHOST(=128,=45,0,0)	;DEC-WRL-NET		(via 36.22.0.10)
	IPHOST(=255,=255,0,0)
	;BARRNet routes
	IPHOST(=128,=32,0,0)	;Berkeley		(via 36.125.0.31)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=102,0,0)	;NASA-AMES		(via 36.125.0.30)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=114,0,0)	;UC Santa Cruz		(via 36.125.0.31)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=120,0,0)	;UC Davis		(via 36.125.0.31)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=218,0,0)	;UC San Francisco	(via 36.125.0.31)
	IPHOST(=255,=255,0,0)
	IPHOST(=192,=31,=95,0)	;UC System Pres. Office	(via 36.125.0.31)
	IPHOST(=255,=255,=255,0)
	IPHOST(=128,=155,0,0)	;NASA Langley Rsch. Ctr.(via 36.125.0.30)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=149,0,0)	;JPL			(via 36.125.0.30)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=183,0,0)	;NASA Goddard Flt. Ctr.	(via 36.125.0.30)
	IPHOST(=255,=255,0,0)
	IPHOST(=128,=158,0,0)	;NASA Marshall Flt. Ctr.(via 36.125.0.30)
	IPHOST(=255,=255,0,0)
	IPHOST(=192,=12,=207,0)	;San Diego Superc. Ctr.	(via 36.125.0.31)
	IPHOST(=255,=255,=255,0)
REPEAT 2,<
	0			;Patch space
	0			;
>;REPEAT 2
ETHRTN←←.-ETHRTS
>;IFN FTSUAI

IFN FTLLL,<
ARPAGW:
	IMPHST(2,=73)	;SRI-MILNET-GW	(First home gateway for S1-A)
	IMPHST(3,=34)	;LBL-MILNET-GW	(Second home gateway)
	IMPHST(0,=106)	;ARPA-MILNET-GW	(Other ARPA/MILNET gateways)
	IMPHST(2,=49)	;BBN-MILNET-GW
	IMPHST(0,=104)	;DCEC-MILNET-GW
	IMPHST(0,=103)	;ISI-MILNET-GW
	IMPHST(0,=105)	;SAC-MILNET-GW
ARPAGN←←.-ARPAGW
>;IFN FTLLL

IFN FTCCRMA,<
ETHGW:	SUHOST(=49,3)	;KNOLL-A-GATEWAY
ETHGN←←.-ETHGW
>;IFN FTCCRMA

IFN FTSUAI!FTCCRMA,<
;Default domain servers.  Lowcore 351 points here.
DOMSRV:	IPHOST(=36,=56,0,=151)	;Argus.Stanford.EDU
	IPHOST(=36,=21,0,=20)	;Jessica.Stanford.EDU
	IPHOST(=36,=8,0,=47)	;LaBrea.Stanford.EDU
	IPHOST(=10,0,0,=52)	;C.ISI.EDU
	IPHOST(=10,0,0,=51)	;SRI-NIC.ARPA
NDOMSR←←.-DOMSRV
>;IFN FTSUAI!FTCCRMA
